theme(
legend.background = element_blank(),
legend.key = element_blank(),
plot.background = element_blank(),
axis.line = element_blank()
)
if (!ticks) {
ret <- ret + theme(axis.ticks = element_blank())
}
ret
}
## colors
BLUE <- 'forest green'
RED <- '#eb3f25'
TEAL <- '#00b495'
ggplot(aes(mpg, drat, col=factor(cyl)), data=mtcars) + geom_point(size=5) + theme_enigma() + ggtitle('okokok this is cool')
require(ggplot2)
theme_enigma <- function(base_size = 16, base_family = "Avenir Light", ticks = FALSE) {
## TODO: start with theme_minimal
ret <- theme_bw(
base_family = base_family,
base_size = base_size) +
theme(
)
if (!ticks) {
ret <- ret + theme(axis.ticks = element_blank())
}
ret
}
## colors
BLUE <- 'forest green'
RED <- '#eb3f25'
TEAL <- '#00b495'
ggplot(aes(mpg, drat, col=factor(cyl)), data=mtcars) + geom_point(size=5) + theme_enigma() + ggtitle('okokok this is cool')
group_to_vars$pvalue <- NULL
group_to_vars$vacancy <- NULL
group_to_vars$qfs1 <- NULL
group_to_vars$rent <- NULL
group_to_vars$lprice <- NULL
vars <- as.character(unlist(group_to_vars))
# remove ids / geo vars / dep. vars.
vars <- vars[7:length(vars)]
calc_correlation_with_y <- function(n, y, abs=F) {
c <- round(cor(d[, y], d[, n], use="pairwise.complete.obs"), 3)
if (abs){
c <- abs(c)
}
return(data.frame(var = n, cor = c))
}
calc_corrlation_per_group_with_y <- function(g, y, abs) {
vars <- group_to_vars[g][[1]]
if (!is.null(vars)) {
group_cor_d <- ldply(vars, calc_correlation_with_y, y, abs)
data.frame(group=g, cor=round(mean(na.omit(group_cor_d$cor)), 3))
}
}
cor_d <- ldply(vars, calc_correlation_with_y, 'smoke')
cor_d <- cor_d[order(cor_d$cor, decreasing=T), ]
ggplot(head(cor_d, 25), aes(x=reorder(var, cor), y=cor, label=cor)) +
geom_bar(stat='identity', color=TEAL, fill=TEAL) +
geom_text(size=4) +
coord_flip() +
xlab('Variable') +
ylab('Correlation') +
labs(title='Top 25 correlatied variables with "smoke"') +
theme_enigma()
group_cor_d <- ldply(triple_groups, calc_corrlation_per_group_with_y, 'smoke', T)
group_cor_d <- group_cor_d[!is.na(group_cor_d$cor), ]
group_cor_d <- group_cor_d[order(group_cor_d$cor, decreasing=T), ]
ggplot(group_cor_d, aes(x=reorder(group, cor), y=cor, label=cor)) +
geom_bar(stat='identity', color=TEAL, fill=TEAL) +
geom_text(size=4) +
coord_flip() +
xlab('Variable group') +
ylab('Correlation with smoke') +
labs(title='Mean absolute correlations with "smoke" by variable group') +
theme_enigma()
gnore_groups = c('pvalue', 'vacancy', 'zincn', 'qfs1', 'rent', 'lprice')
idx = c()
for (g in ignore_groups) {
idx <- c(idx, group_to_idx[[g]])
}
d <- d[,-(idx)]
VARS <- c("smoke", 'smsa', "built_1980_to_1989", "built_1960_to_1969", "built_2010_to_later", "built_1990_to_1999", "built_1950_to_1959", "built_1939_or_earlier", "poor_50_to_99", "poor_under_50", "poor_184_to_199", "poor_125_to_149", "poor_100_to_124", "poor_150_to_184", "hhmove_moved_in_1990_to_1999", "hhmove_moved_in_1969_or_earlier", "hhmove_moved_in_2000_to_2009", "hhmove_moved_in_1970_to_1979", "hhmove_moved_in_1980_to_1989", "hhgrad_associates_degree", "hhgrad_7th_or_8th_grade", "hhgrad_9th_grade", "hhgrad_doctorate_degree", "hhgrad_5th_or_6th_grade", "hhgrad_regular_high_school_grad", "hhgrad_bachelors_degree", "hhgrad_1st_2nd_3rd_4th_grade", "hhgrad_11th_grade", "hhgrad_less_than_1st_grade", "hhgrad_12th_grade_no_diploma", "hhspan_yes", "tenure_renter_occupied", "hfuel_wood", "hhrace_hawaiian_pac_isl_only", "hhrace_asian_only", "hhrace_other", "hhrace_black_only", "hhrace_native_am_only", "hhrace_white_only", "mg_yes")
d <- subset(d, select=VARS)
save(d, file='cache/model-data.Rda')
getwd()
rm(list=ls()[which(!ls() %in% c('WD', 'VARS'))])
# load minimal environment.
setwd(WD)
source('rscripts/plot_theme.R')
source('rscripts/model.R')
load(file='cache/model-data.Rda')
rm(list=ls())
# set your working directory here
WD <- '/Users/ajb/Documents/github/smoke-signals-model/'
setwd(WD)
# set where you want the model output to go here
require(ggplot2)
require(reshape2)
require(bigrf)
require(scales)
require(knitr)
# knitr options
opts_chunk$set(
message=F, echo=F,
warning=F, cache=T,
results='hide',
fig.height=3,
fig.width=5
)
# include the plot theme
source('rscripts/plot_theme.R')
source('rscripts/plot_theme.R')
# clean the ahs data.
source('rscripts/clean_ahs.R')
nrows <- nrow(d)
per_na <- function(x) {
round(((length(which(is.na(x))) / nrows) * 100), 2)
}
group_per_missing <- function(g){
vars <- group_to_vars[g][[1]]
x <- subset(d, select=vars)
data.frame(group=g, per_missing=mean(apply(x, 2, per_na)))
}
per_missing_by_group <- ldply(groups, group_per_missing)
ggplot(per_missing_by_group, aes(x=reorder(group, per_missing), y=per_missing, label=per_missing)) +
geom_bar(stat='identity', color=RED, fill=RED) +
geom_text(size=4) +
coord_flip() +
xlab('Variable group') +
ylab('Percent of observations missing') +
labs(title='Missing Data by Variable Group') +
theme_enigma()
to_vars$pvalue <- NULL
group_to_vars$vacancy <- NULL
group_to_vars$qfs1 <- NULL
group_to_vars$rent <- NULL
group_to_vars$lprice <- NULL
vars <- as.character(unlist(group_to_vars))
# remove ids / geo vars / dep. vars.
vars <- vars[7:length(vars)]
calc_correlation_with_y <- function(n, y, abs=F) {
c <- round(cor(d[, y], d[, n], use="pairwise.complete.obs"), 3)
if (abs){
c <- abs(c)
}
return(data.frame(var = n, cor = c))
}
calc_corrlation_per_group_with_y <- function(g, y, abs) {
vars <- group_to_vars[g][[1]]
if (!is.null(vars)) {
group_cor_d <- ldply(vars, calc_correlation_with_y, y, abs)
data.frame(group=g, cor=round(mean(na.omit(group_cor_d$cor)), 3))
}
}
cor_d <- ldply(vars, calc_correlation_with_y, 'smoke')
cor_d <- cor_d[order(cor_d$cor, decreasing=T), ]
ggplot(head(cor_d, 25), aes(x=reorder(var, cor), y=cor, label=cor)) +
geom_bar(stat='identity', color=TEAL, fill=TEAL) +
geom_text(size=4) +
coord_flip() +
xlab('Variable') +
ylab('Correlation') +
labs(title='Top 25 correlatied variables with "smoke"') +
theme_enigma()
group_cor_d <- ldply(triple_groups, calc_corrlation_per_group_with_y, 'smoke', T)
group_cor_d <- group_cor_d[!is.na(group_cor_d$cor), ]
group_cor_d <- group_cor_d[order(group_cor_d$cor, decreasing=T), ]
ggplot(group_cor_d, aes(x=reorder(group, cor), y=cor, label=cor)) +
geom_bar(stat='identity', color=TEAL, fill=TEAL) +
geom_text(size=4) +
coord_flip() +
xlab('Variable group') +
ylab('Correlation with smoke') +
labs(title='Mean absolute correlations with "smoke" by variable group') +
theme_enigma()
ignore_groups = c('pvalue', 'vacancy', 'zincn', 'qfs1', 'rent', 'lprice')
idx = c()
for (g in ignore_groups) {
idx <- c(idx, group_to_idx[[g]])
}
d <- d[,-(idx)]
VARS <- c("smoke", 'smsa', "built_1980_to_1989", "built_1960_to_1969", "built_2010_to_later", "built_1990_to_1999", "built_1950_to_1959", "built_1939_or_earlier", "poor_50_to_99", "poor_under_50", "poor_184_to_199", "poor_125_to_149", "poor_100_to_124", "poor_150_to_184", "hhmove_moved_in_1990_to_1999", "hhmove_moved_in_1969_or_earlier", "hhmove_moved_in_2000_to_2009", "hhmove_moved_in_1970_to_1979", "hhmove_moved_in_1980_to_1989", "hhgrad_associates_degree", "hhgrad_7th_or_8th_grade", "hhgrad_9th_grade", "hhgrad_doctorate_degree", "hhgrad_5th_or_6th_grade", "hhgrad_regular_high_school_grad", "hhgrad_bachelors_degree", "hhgrad_1st_2nd_3rd_4th_grade", "hhgrad_11th_grade", "hhgrad_less_than_1st_grade", "hhgrad_12th_grade_no_diploma", "hhspan_yes", "tenure_renter_occupied", "hfuel_wood", "hhrace_hawaiian_pac_isl_only", "hhrace_asian_only", "hhrace_other", "hhrace_black_only", "hhrace_native_am_only", "hhrace_white_only", "mg_yes")
d <- subset(d, select=VARS)
save(d, file='cache/model-data.Rda')
rm(list=ls()[which(!ls() %in% c('WD', 'VARS'))])
# load minimal environment.
setwd(WD)
source('rscripts/plot_theme.R')
source('rscripts/model.R')
load(file='cache/model-data.Rda')
# assess effect of class weights on errors.
o <- rf_classwts(d, ntree=30, sampsize=70000, weights=seq(1,31, 5), trace=0)
warnings()
rf_classwts
rf_classwts_plot(o, optimal=21)
o <- rf_classwts(d, ntree=30, sampsize=70000, weights=seq(1,31, 5), trace=0)
head(d)
library('Rsenal')
missdf(d)
smokesignals_sdir <- '/Users/ajb/Documents/github/smoke-signals-model/'
setwd('/Users/ajb/Google Drive/Red Cross/smokealarm/code/ahs_smokealarm_ind')
smokesignals_dir <- '/Users/ajb/Documents/github/smoke-signals-model/'
smokesignals_dir <- '/Users/ajb/Documents/github/smoke-signals-model/'
ssresults <- read.csv(paste0(smokesignals_dir, '/data/data/smoke-alarm-risk-scores.csv'))
smokesignals_dir <- '/Users/ajb/Documents/github/smoke-signals-model'
ssresults <- read.csv(paste0(smokesignals_dir, '/data/data/smoke-alarm-risk-scores.csv'))
ssresults <- read.csv(paste0(smokesignals_dir, 'data/smoke-alarm-risk-scores.csv'))
ssresults <- read.csv(paste0(smokesignals_dir, '/data/smoke-alarm-risk-scores.csv'))
head(ssresults)
rm(list=ls())
ss <- read.csv(paste0(smokesignals_dir, '/data/smoke-alarm-risk-scores.csv'))
smokesignals_dir <- '/Users/ajb/Documents/github/smoke-signals-model'
setwd('/Users/ajb/Google Drive/Red Cross/smokealarm/code/ahs_smokealarm_ind')
ss <- read.csv(paste0(smokesignals_dir, '/data/smoke-alarm-risk-scores.csv'))
head(ss[,1])
head(as.character(ss[,1]))
library('stringr')
head(as.character(substr(ss[,1]), 0, 7))
head(as.character(substr(as.character(ss[,1]), 0, 7))
)
head(as.character(substr(as.character(ss[,1]), 0, 7)))
ss[,bg_geoid:=as.character(bg_geoid)]
ss <- data.table(read.csv(paste0(smokesignals_dir, '/data/smoke-alarm-risk-scores.csv')))
ss[,bg_geoid:=as.character(bg_geoid)]
ss[,tract:=substr(bg_geoid, 0, 7)]
ss
table(nchar(ss$bg_geoid))
ss[,nchart:=nchar(bg_geoid)]
ss[nchart==11,]
ss[nchart==12,]
ss[,block:=substr(bg_geoid, nchar(bg_geoid)-5, nchar(bg_geoid))]
ss
ss[,block:=substr(bg_geoid, nchar(bg_geoid)-3, nchar(bg_geoid))]
ss
ss[,tract:=gsub('.{4}$', '', bg_geoid)]
ss
table(nchar(ss$tract))
table(nchar(ss$block))
ss[nchar(ss$tract)==7),]
ss[nchar(ss$tract)==7,]
ss[,state:=gsub('.{6}$', '', tract)]
ss
table(ss$state)
sort(table(ss$state))
ss
ss[,ctract:=gsub('.{3}$', '', tract)]
ss
ss[,ctract:=nchar(tract)-2, nchar(tract)]
ss[,tract:=gsub('.{4}$', '', bg_geoid)]
ss[,ctract:=nchar(tract)-2, nchar(tract)]
ss[,ctract:=nchar(tract)-2L, nchar(tract)]
ss[,ctract:=substr(tract, nchar(tract)-2L, nchar(tract))]
ss
ss[,gsub('.{3}$', '', tract)]
ss
head(ss[,gsub('.{3}$', '', tract)])
ss[,{tmp=gsub('.{3}$', '', tract); county=substr(tmp, nchar(tmp)-2, nchar(tmp))}])
ss[,{tmp=gsub('.{3}$', '', tract); county=substr(tmp, nchar(tmp)-2, nchar(tmp))}]
ss[,{tmp=gsub('.{3}$', '', tract); county=substr(tmp, nchar(tmp)-2, nchar(tmp)), list(county=county)}]
ss[,{tmp=gsub('.{3}$', '', tract); county=substr(tmp, nchar(tmp)-2, nchar(tmp)); list(county=county)}]
ss[,county:={tmp=gsub('.{3}$', '', tract); county=substr(tmp, nchar(tmp)-2, nchar(tmp)); list(county=county)}]
ss
ss[,county:={tmp=gsub('.{3}$', '', tract); county=substr(tmp, nchar(tmp)-2, nchar(tmp))}]
ss
ss <- data.table(read.csv(paste0(smokesignals_dir, '/data/smoke-alarm-risk-scores.csv')))
#' #### separating block from census tract
ss[,bg_geoid:=as.character(bg_geoid)]
ss[,block:=substr(bg_geoid, nchar(bg_geoid)-3, nchar(bg_geoid))]
ss[,census_tract:=gsub('.{4}$', '', bg_geoid)]
ss[,state:=gsub('.{6}$', '', tract)]
ss[,tract:=substr(census_tract, nchar(census_tract)-2L, nchar(census_tract))]
ss[,county:={tmp=gsub('.{3}$', '', tract); county=substr(tmp, nchar(tmp)-2, nchar(tmp))}]
ss <- data.table(read.csv(paste0(smokesignals_dir, '/data/smoke-alarm-risk-scores.csv')))
#' #### separating block from census tract
ss[,bg_geoid:=as.character(bg_geoid)]
ss[,block:=substr(bg_geoid, nchar(bg_geoid)-3, nchar(bg_geoid))]
ss[,census_tract:=gsub('.{4}$', '', bg_geoid)]
ss[,state:=gsub('.{6}$', '', census_tract)]
ss[,tract:=substr(census_tract, nchar(census_tract)-2L, nchar(census_tract))]
ss[,county:={tmp=gsub('.{3}$', '', tract); county=substr(tmp, nchar(tmp)-2, nchar(tmp))}]
ss
ss[,county:={tmp=gsub('.{3}$', '', census_tract); county=substr(tmp, nchar(tmp)-2, nchar(tmp))}]
ss
table(ss[,state])
hist(table(ss[,state]))
table(ss[,state])
ss[,blocks_per_tract:=.N, by=census_tract]
hist(ss[,blocks_per_tract])
hist(ss[,blocks_per_tract], col='navy', main='Blocks per census tract')
countyChoroOverhead <- function() {
# ``` this loads the necessary overhead to plot a series at the county level```
library('ggmap')
library('rgdal')
US.counties <- readOGR(dsn="Z:/pih/data/census/shapefiles_county", layer="gz_2010_us_050_00_5m")
US.counties <- US.counties[!US.counties$STATE %in% c('02', '15', '72'),] # removing AK, HI, PR from plots
county.data <- US.counties@data
county.data$id <- rownames(county.data)
county.data$county5_code <- paste0(county.data$STATE, county.data$COUNTY)
us.dat <- fortify(US.counties)
us.dat <- merge(us.dat, county.data, by='id')
library('UScensus2010')
library('stringr')
data(countyfips)
countyfips$state_num <- as.numeric(substr(countyfips$fips,0,2))
stlookup <- countyfips[duplicated(countyfips$state_num)==F,]
names(stlookup)[names(stlookup)=='acronym'] <- 'state_code'
stlookup$state_num <- str_pad(stlookup$state_num, width=2, pad='0')
names(us.dat)[names(us.dat)=='STATE'] <- 'state_num'
us.dat$state_code <- stlookup$state_code[match(us.dat$state_num, stlookup$state_num)]  # bringing state_code to us.dat
mstate <- map_data('state')
retL <- list(us.dat=us.dat, mstate=mstate)
return(retL)
}
countyChoro <- function(ser, brks, pal, df=cnagg2, mapdata=us.dat, mstate=mstate, setNA=NULL, main=''){
if(is.null(setNA)==F) df[which(setNA), ser] <- NA
serint <- as.integer(cut(df[,ser], breaks=brks, include.lowest=T))
mapdata$int <- factor(serint[match(mapdata[,'county5_code'], as.character(df[,'county5_code']))])
sercol <- cut(df[,ser], breaks=brks, include.lowest=T)
labs <- paste(table(serint), levels(sercol)[which(table(sercol)>0)])
gg <- ggplot(mapdata, aes(x=long, y=lat, group=group, fill=int)) +  geom_polygon(color='NA') +
scale_fill_manual("Freq (low, high)", values=pal[which(table(sercol)>0)], labels=labs) +
geom_polygon(data=mstate, fill=NA, color='black') +
ggtitle(main)
}
st2num <- function(x) {
# ```this function turns a vector of state abbreviations into their corresponding numeric codes```
data(countyfips)
countyfips$state_num <- as.numeric(substr(countyfips$fips,0,2))
stlookup <- countyfips[duplicated(countyfips$state_num)==F,]
names(stlookup)[names(stlookup)=='acronym'] <- 'state_code'
stlookup$state_num <- str_pad(stlookup$state_num, width=2, pad='0')
stlookup$state_code <- toupper(stlookup$state_code)
ret <- stlookup$state_num[match(x, stlookup$state_code)]
return(ret)
}
countyChoroOverhead <- function(path="/Users/ajb/Google Drive/Red Cross/smokealarm/data/Census/cb_2014_us_county_5m") {
# ``` this loads the necessary overhead to plot a series at the county level```
library('ggmap')
library('rgdal')
US.counties <- readOGR(dsn=path, layer="gz_2010_us_050_00_5m")
US.counties <- US.counties[!US.counties$STATE %in% c('02', '15', '72'),] # removing AK, HI, PR from plots
county.data <- US.counties@data
county.data$id <- rownames(county.data)
county.data$county5_code <- paste0(county.data$STATE, county.data$COUNTY)
us.dat <- fortify(US.counties)
us.dat <- merge(us.dat, county.data, by='id')
library('UScensus2010')
library('stringr')
data(countyfips)
countyfips$state_num <- as.numeric(substr(countyfips$fips,0,2))
stlookup <- countyfips[duplicated(countyfips$state_num)==F,]
names(stlookup)[names(stlookup)=='acronym'] <- 'state_code'
stlookup$state_num <- str_pad(stlookup$state_num, width=2, pad='0')
names(us.dat)[names(us.dat)=='STATE'] <- 'state_num'
us.dat$state_code <- stlookup$state_code[match(us.dat$state_num, stlookup$state_num)]  # bringing state_code to us.dat
mstate <- map_data('state')
retL <- list(us.dat=us.dat, mstate=mstate)
return(retL)
}
countyChoro <- function(ser, brks, pal, df=cnagg2, mapdata=us.dat, mstate=mstate, setNA=NULL, main=''){
if(is.null(setNA)==F) df[which(setNA), ser] <- NA
serint <- as.integer(cut(df[,ser], breaks=brks, include.lowest=T))
mapdata$int <- factor(serint[match(mapdata[,'county5_code'], as.character(df[,'county5_code']))])
sercol <- cut(df[,ser], breaks=brks, include.lowest=T)
labs <- paste(table(serint), levels(sercol)[which(table(sercol)>0)])
gg <- ggplot(mapdata, aes(x=long, y=lat, group=group, fill=int)) +  geom_polygon(color='NA') +
scale_fill_manual("Freq (low, high)", values=pal[which(table(sercol)>0)], labels=labs) +
geom_polygon(data=mstate, fill=NA, color='black') +
ggtitle(main)
}
st2num <- function(x) {
# ```this function turns a vector of state abbreviations into their corresponding numeric codes```
data(countyfips)
countyfips$state_num <- as.numeric(substr(countyfips$fips,0,2))
stlookup <- countyfips[duplicated(countyfips$state_num)==F,]
names(stlookup)[names(stlookup)=='acronym'] <- 'state_code'
stlookup$state_num <- str_pad(stlookup$state_num, width=2, pad='0')
stlookup$state_code <- toupper(stlookup$state_code)
ret <- stlookup$state_num[match(x, stlookup$state_code)]
return(ret)
}
source('/functions/countyChoro.R')
source('functions/countyChoro.R')
countyChoroOverhead()
install.packages('ggmap')
countyChoroOverhead()
install.packages('rgdal')
countyChoroOverhead()
countyChoroOverhead()
library('devtools')
install_github('rforge/rgdal')
install.packages(‘rgdal’,repos=”http://www.stats.ox.ac.uk/pub/RWin“)
install.packages('rgdal',repos="http://www.stats.ox.ac.uk/pub/RWin")
install.packages("rgeos", repos="http://R-Forge.R-project.org", type="source")
require(rgeos)
install.packages('rgeos')
require(rgeos)
require('rgeos')
library('rgeos')
library('rgdal')
library('rgdal')
library('rgeos')
install.packages("rgdal", repos="http://R-Forge.R-project.org", type="source")
install.packages('rgdal',repos="http://www.stats.ox.ac.uk/pub/RWin")
library('rgdal')
source('functions/countyChoro.R')
countyChoroOverhead()
source('functions/countyChoro.R')
source('functions/countyChoro.R')
source('functions/countyChoro.R')
countyChoroOverhead()
path="/Users/ajb/Google Drive/Red Cross/smokealarm/data/Census/cb_2014_us_county_5m"
library('ggmap')
library('ggmap')
library('ggmap')
library('rgdal')
US.counties <- readOGR(dsn=path, layer="cb_2014_us_county_5m")
source('functions/countyChoro.R')
countyChoroOverhead()
install.packages('UScensus2010')
countyChoroOverhead()
s
ss
ssc <- ss[,.(
smoke_alarm_risk=mean(smoke_alarm_risk),
ct_pop=sum(bg_pop),
blocks_per_tract=.N
)]
ssc
ssc <- ss[,.(
smoke_alarm_risk=mean(smoke_alarm_risk),
ct_pop=sum(bg_pop),
blocks_per_tract=.N
), by=.(census_tract, state)]
ssc <- ss[,.(
smoke_alarm_risk=mean(smoke_alarm_risk),
ct_pop=sum(bg_pop),
blocks_per_tract=.N
), by=.(census_tract)]
ssc <- ss[,.(
smoke_alarm_risk=mean(smoke_alarm_risk),
ct_pop=sum(bg_pop),
blocks_per_tract=.N
), by=.(census_tract, state)]
hist(ssc$smoke_alarm_risk)
brks <- quantile(ssc[,smoke_alarm_risk], seq(0,1,length.out=10))
pal <- colorRampPalette('gray', '#5A0000')(length(brks)-1)
colorRampPalette('gray', '#5A0000')
pal <- colorRampPalette(c('gray', '#5A0000'))(length(brks)-1)
countyChoroOverhead()
mapoverhead <- countyChoroOverhead()
brks <- quantile(ssc[,smoke_alarm_risk], seq(0,1,length.out=10))
pal <- colorRampPalette(c('gray', '#5A0000'))(length(brks)-1)
countyChoro(ser='smoke_alarm_risk', pal=pal, df=data.frame(ssc), mstate=mapoverhead$mstate, mapdata=mapoverhead$us.dat)
countyChoro(ser='smoke_alarm_risk', brks=brks, pal=pal, df=data.frame(ssc), mstate=mapoverhead$mstate, mapdata=mapoverhead$us.dat)
ssc
df <- data.frame(ssc)
countyChoro(ser='smoke_alarm_risk', brks=brks, pal=pal, df=df, mstate=mapoverhead$mstate, mapdata=mapoverhead$us.dat)
library('stringr')
ssc[,county5_code:=str_pad(state, width=2, side='left', '0')]
ssc
ssc <- ss[,.(
smoke_alarm_risk=mean(smoke_alarm_risk),
ct_pop=sum(bg_pop),
blocks_per_tract=.N
), by=.(county, state)]
ssc
ssc <- ss[,.(
smoke_alarm_risk=mean(smoke_alarm_risk),
ct_pop=sum(bg_pop),
blocks_per_tract=.N
), by=.(county, state)]
ssc[,county5_code:=paste0(str_pad(state, width=2, side='left', '0'), county)]
brks <- quantile(ssc[,smoke_alarm_risk], seq(0,1,length.out=10))
pal <- colorRampPalette(c('gray', '#5A0000'))(length(brks)-1)
df <- data.frame(ssc)
countyChoro(ser='smoke_alarm_risk', brks=brks, pal=pal, df=df, mstate=mapoverhead$mstate, mapdata=mapoverhead$us.dat)
countyChoro(ser='smoke_alarm_risk', brks=brks, pal=pal, df=df, mstate=mapoverhead$mstate, mapdata=mapoverhead$us.dat) + theme_bw()
hist(ssc$smoke_alarm_risk)
brks <- seq(min(ssc[,smoke_alarm_risk]), max(ssc[,smoke_alarm_risk]), length.out=10)
pal <- colorRampPalette(c('gray', '#5A0000'))(length(brks)-1)
df <- data.frame(ssc)
countyChoro(ser='smoke_alarm_risk', brks=brks, pal=pal, df=df, mstate=mapoverhead$mstate, mapdata=mapoverhead$us.dat) + theme_bw()
# Fixed width binning
brks <- seq(min(ssc[,smoke_alarm_risk]), max(ssc[,smoke_alarm_risk]), length.out=10)
pal <- colorRampPalette(c('white', '#5A0000'))(length(brks)-1)
df <- data.frame(ssc)
countyChoro(ser='smoke_alarm_risk', brks=brks, pal=pal, df=df, mstate=mapoverhead$mstate, mapdata=mapoverhead$us.dat) +
theme_bw() + ggtitle('Fixed width binning')
brks <- seq(min(ssc[,smoke_alarm_risk]), max(ssc[,smoke_alarm_risk]), length.out=10)
pal <- colorRampPalette(c('gray', '#5A0000'))(length(brks)-1)
df <- data.frame(ssc)
countyChoro(ser='smoke_alarm_risk', brks=brks, pal=pal, df=df, mstate=mapoverhead$mstate, mapdata=mapoverhead$us.dat) +
theme_bw() + ggtitle('Fixed width binning')
brks <- seq(min(ssc[,blocks_per_tract]), max(ssc[,blocks_per_tract]), length.out=10)
pal <- colorRampPalette(c('gray', '#5A0000'))(length(brks)-1)
df <- data.frame(ssc)
countyChoro(ser='blocks_per_tract', brks=brks, pal=pal, df=df, mstate=mapoverhead$mstate, mapdata=mapoverhead$us.dat) +
theme_bw() + ggtitle('Fixed width binning')
brks <- quantile(ssc[,blocks_per_tract], seq(0,1,length.out=10))
pal <- colorRampPalette(c('gray', '#5A0000'))(length(brks)-1)
df <- data.frame(ssc)
countyChoro(ser='blocks_per_tract', brks=brks, pal=pal, df=df, mstate=mapoverhead$mstate, mapdata=mapoverhead$us.dat) +
theme_bw() + ggtitle('Blocks per county')
rm(list=ls())
render('/Users/ajb/Google Drive/Red Cross/smokealarm/code/ahs_smokealarm_ind/explore_enigma_smoke_signals_predictions.R')
library('knitr')
render('/Users/ajb/Google Drive/Red Cross/smokealarm/code/ahs_smokealarm_ind/explore_enigma_smoke_signals_predictions.R')
library('rmarkdown')
render('/Users/ajb/Google Drive/Red Cross/smokealarm/code/ahs_smokealarm_ind/explore_enigma_smoke_signals_predictions.R')
